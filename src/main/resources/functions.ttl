#
#    Copyright 2021 A. Paul Millar
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

#  This file provides a description of the available functions using
#  the Function Ontology (FnO).  For more details, see
#  https://fno.io/

@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix fno:  <https://w3id.org/function/ontology#> .
@prefix fnml: <http://semweb.mmlab.be/ns/fnml#> .
@prefix fnoi: <https://w3id.org/function/vocabulary/implementation#> .
@prefix fnom: <https://w3id.org/function/vocabulary/mapping#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix ref:  <https://github.com/paulmillar/rml-extra-functions#> .
@prefix dcterms: <http://purl.org/dc/terms/> .

#
#  FUNCTIONS
#

ref:resolve a fno:Function ;
    fno:name "resolve" ;
    dcterms:description "Resolves a path relative to some URI." ;
    fno:expects   ( ref:param_base_uri ref:param_path ) ;
    fno:returns   ( ref:stringOut ) .

ref:resolveDirectory a fno:Function ;
    fno:name "resolveDirectory" ;
    dcterms:description "Resolves a path relative to some directory URI." ;
    fno:expects   ( ref:param_base_uri ref:param_path ) ;
    fno:returns   ( ref:stringOut ) .

ref:relativize a fno:Function ;
    fno:name "relativize" ;
    dcterms:description "Try to express a URI as a relative path from some other URI." ;
    fno:expects   ( ref:param_base_uri ref:param_target_uri ) ;
    fno:returns   ( ref:stringOut ) .

ref:recogniseUrl a fno:Function ;
    fno:name "recogniseUrl" ;
    dcterms:description "Take a string that should be a URL and convert it to a valid URL." ;
    fno:expects   ( ref:param_target_uri ) ;
    fno:returns   ( ref:stringOut ) .

ref:emptyToNull a fno:Function;
    fno:name "emptyToNull";
    dcterms:description "Convert empty strings to null values.";
    fno:expects   ( ref:param_in_str );
    fno:returns   ( ref:stringOut ).

ref:blankToNull a fno:Function;
    fno:name "blankToNull";
    dcterms:description "Convert blank strings to null values.";
    fno:expects   ( ref:param_in_str );
    fno:returns   ( ref:stringOut ).

ref:trim a fno:Function;
    fno:name "trim";
    dcterms:description "Removing any leading or trailing white space.";
    fno:expects   ( ref:param_in_str );
    fno:returns   ( ref:stringOut ).

ref:withLeadingZeros a fno:Function;
    fno:name "withLeadingZeros";
    dcterms:description "Add leading zeros to make desired minimum length.";
    fno:expects   ( ref:param_in_int ref:param_count_int );
    fno:returns   ( ref:stringOut ).


#
#  PARAMETERS
#

ref:param_base_uri a fno:Parameter ;
    fno:name      "The base URI" ;
    rdfs:label    "The base URI" ;
    fno:predicate ref:p_string_base_uri ;
    fno:type      xsd:string ;
    fno:required  "true"^^xsd:boolean .

ref:param_target_uri a fno:Parameter ;
    fno:name      "The target URI" ;
    rdfs:label    "The target URI" ;
    fno:predicate ref:p_string_target_uri ;
    fno:type      xsd:string ;
    fno:required  "true"^^xsd:boolean .

ref:param_path a fno:Parameter ;
    fno:name      "Path to resolve" ;
    rdfs:label    "Path to resolve" ;
    fno:predicate ref:p_string_path ;
    fno:type      xsd:string ;
    fno:required  "true"^^xsd:boolean .

ref:param_in_str a fno:Parameter;
    fno:name      "The string to normalise";
    rdfs:label    "The string to normalise";
    fno:predicate ref:p_string_in;
    fno:type      xsd:string;
    fno:required  "true"^^xsd:boolean .

ref:param_in_int a fno:Parameter;
    fno:name      "The integer value to represent";
    rdfs:label    "The integer value to represent";
    fno:predicate ref:p_int_in;
    fno:type      xsd:int;
    fno:required  "false"^^xsd:boolean .

ref:param_count_int a fno:Parameter;
    fno:name      "The count";
    rdfs:label    "The count";
    fno:predicate ref:p_int_count;
    fno:type      xsd:int;
    fno:required  "true"^^xsd:boolean .

#
#  OUTPUTS
#

ref:stringOut a fno:Output ;
    fno:name      "output string" ;
    rdfs:label    "output string" ;
    fno:predicate ref:stringOutput ;
    fno:type            xsd:string .

#
#  IMPLEMENTATIONS
#

ref:UriUtils a fnoi:JavaClass ;
    doap:download-page "./rml-extra-functions-1.0-SNAPSHOT.jar" ;
    fnoi:class-name    "com.github.paulmillar.UriUtils" .

ref:StringUtils a fnoi:JavaClass ;
    doap:download-page "./rml-extra-functions-1.0-SNAPSHOT.jar" ;
    fnoi:class-name    "com.github.paulmillar.StringUtils" .

ref:IntegerUtils a fnoi:JavaClass ;
    doap:download-page "./rml-extra-functions-1.0-SNAPSHOT.jar" ;
    fnoi:class-name    "com.github.paulmillar.IntegerUtils" .

#
#  MAPPINGS
#

ref:resolveMapping a fno:Mapping ;
    fno:function         ref:resolve ;
    fno:implementation   ref:UriUtils ;
    fno:methodMapping    [ a fnom:StringMethodMapping ;
        fnom:method-name "resolve" ] .

ref:resolveDirectoryMapping a fno:Mapping ;
    fno:function         ref:resolveDirectory ;
    fno:implementation   ref:UriUtils ;
    fno:methodMapping    [ a fnom:StringMethodMapping ;
        fnom:method-name "resolveDirectory" ] .

ref:relativizeMapping a fno:Mapping ;
    fno:function         ref:relativize ;
    fno:implementation   ref:UriUtils ;
    fno:methodMapping    [ a fnom:StringMethodMapping ;
        fnom:method-name "relativize" ] .

ref:recogniseUrlMapping a fno:Mapping ;
    fno:function         ref:recogniseUrl ;
    fno:implementation   ref:UriUtils ;
    fno:methodMapping    [ a fnom:StringMethodMapping ;
        fnom:method-name "recogniseUrl" ] .

ref:emptyToNullMapping a fno:Mapping;
    fno:function         ref:emptyToNull;
    fno:implementation   ref:StringUtils;
    fno:methodMapping    [ a fnom:StringMethodMapping;
        fnom:method-name "emptyToNull" ].

ref:blankToNullMapping a fno:Mapping;
    fno:function         ref:blankToNull;
    fno:implementation   ref:StringUtils;
    fno:methodMapping    [ a fnom:StringMethodMapping;
        fnom:method-name "blankToNull" ] .

ref:TrimMapping a fno:Mapping;
    fno:function         ref:trim;
    fno:implementation   ref:StringUtils;
    fno:methodMapping    [ a fnom:StringMethodMapping;
        fnom:method-name "trim" ] .

ref:WithLeadingZerosMapping a fno:Mapping;
    fno:function         ref:withLeadingZeros;
    fno:implementation   ref:IntegerUtils;
    fno:methodMapping    [ a fnom:StringMethodMapping;
        fnom:method-name "withLeadingZeros" ] .
